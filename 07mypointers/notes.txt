In Go, a pointer is a variable that stores the memory address of another variable. The type of a pointer is defined by the type of the variable it points to. Here's how you declare and initialize pointers in Go:

1. **Declaration without initialization:** You declare a pointer with the `var` keyword followed by the variable name, the `*` symbol, and the type of the value it points to. For example, `var ptr *int` declares a pointer to an integer. At this point, the pointer doesn't point to any address, so its value is `nil`.

2. **Declaration with initialization:** You can also declare a pointer and initialize it at the same time. You do this by assigning the address of another variable to the pointer using the `&` operator. For example, `var ptr = &myNumber` declares a pointer and initializes it with the address of `myNumber`.

3. **Short declaration and initialization:** Go also allows you to use the `:=` operator to declare and initialize a pointer in one line. For example, `ptr := &myNumber` does the same thing as the previous example.

In your code:

- `var ptr = &myNumber` declares a pointer `ptr` and initializes it with the address of `myNumber`.
- `var ptr2 *int = &myNumber` declares a pointer `ptr2` to an integer and initializes it with the address of `myNumber`.

You can access the value that a pointer points to using the `*` operator. For example, `*ptr` gives you the value of `myNumber`. You can also modify the value that a pointer points to. For example, `*ptr = *ptr + 2` increments the value of `myNumber` by 2.